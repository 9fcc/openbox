/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.17u-20021222-0248
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Window swig_types[0] 
#define  SWIGTYPE_p_otk__OBTimerQueueManager swig_types[1] 
#define  SWIGTYPE_p_ob__Cursors swig_types[2] 
#define  SWIGTYPE_p_ob__OBScreen swig_types[3] 
#define  SWIGTYPE_p_otk__Style swig_types[4] 
#define  SWIGTYPE_p_ob__OBFrame swig_types[5] 
#define  SWIGTYPE_p_ob__OBClient swig_types[6] 
#define  SWIGTYPE_p_ob__Openbox swig_types[7] 
#define  SWIGTYPE_p_Cursor swig_types[8] 
#define  SWIGTYPE_p_otk__Strut swig_types[9] 
#define  SWIGTYPE_p_XShapeEvent swig_types[10] 
#define  SWIGTYPE_p_XConfigureRequestEvent swig_types[11] 
#define  SWIGTYPE_p_otk__OtkEventHandler swig_types[12] 
#define  SWIGTYPE_p_otk__Rect swig_types[13] 
#define  SWIGTYPE_p_ob__OBWidget swig_types[14] 
#define  SWIGTYPE_p_XClientMessageEvent swig_types[15] 
#define  SWIGTYPE_p_otk__OBProperty swig_types[16] 
#define  SWIGTYPE_p_otk__OtkEventDispatcher swig_types[17] 
#define  SWIGTYPE_p_XPropertyEvent swig_types[18] 
#define  SWIGTYPE_p_XDestroyWindowEvent swig_types[19] 
#define  SWIGTYPE_p_otk__BImageControl swig_types[20] 
#define  SWIGTYPE_p_ob__MwmHints swig_types[21] 
#define  SWIGTYPE_p_otk__Configuration swig_types[22] 
#define  SWIGTYPE_p_XUnmapEvent swig_types[23] 
static swig_type_info *swig_types[25];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _openbox.so
  ------------------------------------------------*/
#define SWIG_init    init_openbox

#define SWIG_name    "_openbox"

#ifdef HAVE_CONFIG_H
#  include "../config.h"
#endif

#include "openbox.hh"
#include "screen.hh"
#include "client.hh"


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#include <string>


#include <string>

static PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
static double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o);
}
static double SwigNumber_AsDouble(PyObject* o) {
    return (PyFloat_Check(o) ? PyFloat_AsDouble(o) : double(PyInt_AsLong(o)));
}
static PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromString(s.c_str());
}
static std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#include <vector>
#include <algorithm>
#include <stdexcept>

ob::OBClient *ob_OBScreen_client(ob::OBScreen *self,int i){
    ob::OBScreen::ClientList::iterator it = self->clients.begin();
    std::advance(it,i);
    return *it;
  }
int ob_OBScreen_clientCount(ob::OBScreen const *self){
    return (int) self->clients.size();
  }

  ob::Openbox *Openbox_instance() { return ob::Openbox::instance; }


  #include <iterator>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_Cursors_session_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor arg2 ;
    Cursor *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cursors_session_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->session = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_session_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursors_session_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->session);
    
    {
        Cursor * resultptr;
        resultptr = new Cursor((Cursor &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Cursor, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_move_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor arg2 ;
    Cursor *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cursors_move_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->move = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_move_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursors_move_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->move);
    
    {
        Cursor * resultptr;
        resultptr = new Cursor((Cursor &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Cursor, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_ll_angle_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor arg2 ;
    Cursor *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cursors_ll_angle_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->ll_angle = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_ll_angle_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursors_ll_angle_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->ll_angle);
    
    {
        Cursor * resultptr;
        resultptr = new Cursor((Cursor &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Cursor, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_lr_angle_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor arg2 ;
    Cursor *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cursors_lr_angle_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->lr_angle = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_lr_angle_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursors_lr_angle_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->lr_angle);
    
    {
        Cursor * resultptr;
        resultptr = new Cursor((Cursor &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Cursor, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_ul_angle_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor arg2 ;
    Cursor *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cursors_ul_angle_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->ul_angle = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_ul_angle_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursors_ul_angle_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->ul_angle);
    
    {
        Cursor * resultptr;
        resultptr = new Cursor((Cursor &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Cursor, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_ur_angle_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor arg2 ;
    Cursor *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cursors_ur_angle_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->ur_angle = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursors_ur_angle_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Cursors *arg1 = (ob::Cursors *) 0 ;
    Cursor result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursors_ur_angle_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Cursors,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->ur_angle);
    
    {
        Cursor * resultptr;
        resultptr = new Cursor((Cursor &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Cursor, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Cursors_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ob__Cursors, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Openbox_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Openbox_state",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((ob::Openbox const *)arg1)->state();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_timerManager(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    otk::OBTimerQueueManager *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Openbox_timerManager",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (otk::OBTimerQueueManager *)(arg1)->timerManager();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_otk__OBTimerQueueManager, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_property(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    otk::OBProperty *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Openbox_property",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (otk::OBProperty *)((ob::Openbox const *)arg1)->property();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_otk__OBProperty, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    int arg2 ;
    ob::OBScreen *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Openbox_screen",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ob::OBScreen *)(arg1)->screen(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ob__OBScreen, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_cursors(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    ob::Cursors *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Openbox_cursors",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        ob::Cursors const &_result_ref = ((ob::Openbox const *)arg1)->cursors();
        result = (ob::Cursors *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ob__Cursors, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_addClient(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    Window arg2 ;
    ob::OBClient *arg3 = (ob::OBClient *) 0 ;
    Window *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Openbox_addClient",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Window,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addClient(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_removeClient(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    Window arg2 ;
    Window *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Openbox_removeClient",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Window,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->removeClient(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_findClient(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    Window arg2 ;
    ob::OBClient *result;
    Window *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Openbox_findClient",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Window,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (ob::OBClient *)(arg1)->findClient(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ob__OBClient, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Openbox_shutdown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *arg1 = (ob::Openbox *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Openbox_shutdown",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__Openbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->shutdown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Openbox_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ob__Openbox, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OBScreen_managed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBScreen_managed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBScreen const *)arg1)->managed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_imageControl(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    otk::BImageControl *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBScreen_imageControl",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (otk::BImageControl *)(arg1)->imageControl();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_otk__BImageControl, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_area(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    otk::Rect *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBScreen_area",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        otk::Rect const &_result_ref = ((ob::OBScreen const *)arg1)->area();
        result = (otk::Rect *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_otk__Rect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_style(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    otk::Style *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBScreen_style",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (otk::Style *)((ob::OBScreen const *)arg1)->style();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_otk__Style, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_addStrut(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    otk::Strut *arg2 = (otk::Strut *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBScreen_addStrut",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_otk__Strut,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addStrut(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_removeStrut(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    otk::Strut *arg2 = (otk::Strut *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBScreen_removeStrut",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_otk__Strut,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->removeStrut(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_loadStyle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    otk::Configuration *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBScreen_loadStyle",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_otk__Configuration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->loadStyle((otk::Configuration const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_manageExisting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBScreen_manageExisting",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->manageExisting();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_manageWindow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    Window arg2 ;
    Window *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBScreen_manageWindow",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_Window,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->manageWindow(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_unmanageWindow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    ob::OBClient *arg2 = (ob::OBClient *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBScreen_unmanageWindow",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unmanageWindow(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_client(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    int arg2 ;
    ob::OBClient *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:OBScreen_client",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ob::OBClient *)ob_OBScreen_client(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ob__OBClient, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBScreen_clientCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBScreen *arg1 = (ob::OBScreen *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBScreen_clientCount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBScreen,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)ob_OBScreen_clientCount((ob::OBScreen const *)arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBScreen_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ob__OBScreen, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_MwmHints_flags_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::MwmHints *arg1 = (ob::MwmHints *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MwmHints_flags_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__MwmHints,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MwmHints_flags_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::MwmHints *arg1 = (ob::MwmHints *) 0 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MwmHints_flags_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__MwmHints,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->flags);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MwmHints_functions_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::MwmHints *arg1 = (ob::MwmHints *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MwmHints_functions_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__MwmHints,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->functions = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MwmHints_functions_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::MwmHints *arg1 = (ob::MwmHints *) 0 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MwmHints_functions_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__MwmHints,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->functions);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MwmHints_decorations_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::MwmHints *arg1 = (ob::MwmHints *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MwmHints_decorations_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__MwmHints,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->decorations = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MwmHints_decorations_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::MwmHints *arg1 = (ob::MwmHints *) 0 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MwmHints_decorations_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__MwmHints,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->decorations);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MwmHints_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ob__MwmHints, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OBClient_frame_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    ob::OBFrame *arg2 = (ob::OBFrame *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_frame_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ob__OBFrame,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->frame = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_frame_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    ob::OBFrame *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_frame_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ob::OBFrame *) ((arg1)->frame);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ob__OBFrame, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_ignore_unmaps_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:OBClient_ignore_unmaps_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->ignore_unmaps = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_ignore_unmaps_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_ignore_unmaps_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->ignore_unmaps);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_screen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((ob::OBClient const *)arg1)->screen();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_window(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    Window result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_window",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((ob::OBClient const *)arg1)->window();
    
    {
        Window * resultptr;
        resultptr = new Window((Window &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Window, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((ob::OBClient const *)arg1)->type();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_desktop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_desktop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)((ob::OBClient const *)arg1)->desktop();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_title(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_title",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((ob::OBClient const *)arg1)->title();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_iconTitle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_iconTitle",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((ob::OBClient const *)arg1)->iconTitle();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_appName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_appName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((ob::OBClient const *)arg1)->appName();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_appClass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_appClass",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((ob::OBClient const *)arg1)->appClass();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_canFocus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_canFocus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->canFocus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_urgent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_urgent",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->urgent();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_focusNotify(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_focusNotify",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->focusNotify();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_shaped(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_shaped",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->shaped();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_gravity(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_gravity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((ob::OBClient const *)arg1)->gravity();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_positionRequested(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_positionRequested",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->positionRequested();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_decorations(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    ob::OBClient::DecorationFlags result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_decorations",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ob::OBClient::DecorationFlags)((ob::OBClient const *)arg1)->decorations();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_funtions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    ob::OBClient::FunctionFlags result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_funtions",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ob::OBClient::FunctionFlags)((ob::OBClient const *)arg1)->funtions();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_modal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_modal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->modal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_shaded(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_shaded",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->shaded();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_iconic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_iconic",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->iconic();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_maxVert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_maxVert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->maxVert();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_maxHorz(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_maxHorz",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->maxHorz();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_fullscreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_fullscreen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->fullscreen();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_floating(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_floating",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((ob::OBClient const *)arg1)->floating();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_toggleClientBorder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_toggleClientBorder",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->toggleClientBorder(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_area(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    otk::Rect *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBClient_area",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        otk::Rect const &_result_ref = ((ob::OBClient const *)arg1)->area();
        result = (otk::Rect *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_otk__Rect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:OBClient_move",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->move(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiii:OBClient_resize",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->resize((ob::OBClient::Corner )arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_propertyHandler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    XPropertyEvent *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_propertyHandler",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_XPropertyEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->propertyHandler((XPropertyEvent const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_clientMessageHandler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    XClientMessageEvent *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_clientMessageHandler",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_XClientMessageEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->clientMessageHandler((XClientMessageEvent const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_shapeHandler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    XShapeEvent *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_shapeHandler",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_XShapeEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->shapeHandler((XShapeEvent const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_configureRequestHandler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    XConfigureRequestEvent *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_configureRequestHandler",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_XConfigureRequestEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->configureRequestHandler((XConfigureRequestEvent const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_unmapHandler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    XUnmapEvent *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_unmapHandler",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_XUnmapEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->unmapHandler((XUnmapEvent const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBClient_destroyHandler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::OBClient *arg1 = (ob::OBClient *) 0 ;
    XDestroyWindowEvent *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBClient_destroyHandler",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ob__OBClient,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_XDestroyWindowEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->destroyHandler((XDestroyWindowEvent const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBClient_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ob__OBClient, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Openbox_instance(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ob::Openbox *result;
    
    if(!PyArg_ParseTuple(args,(char *)":Openbox_instance")) goto fail;
    result = (ob::Openbox *)Openbox_instance();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ob__Openbox, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"Cursors_session_set", _wrap_Cursors_session_set, METH_VARARGS },
	 { (char *)"Cursors_session_get", _wrap_Cursors_session_get, METH_VARARGS },
	 { (char *)"Cursors_move_set", _wrap_Cursors_move_set, METH_VARARGS },
	 { (char *)"Cursors_move_get", _wrap_Cursors_move_get, METH_VARARGS },
	 { (char *)"Cursors_ll_angle_set", _wrap_Cursors_ll_angle_set, METH_VARARGS },
	 { (char *)"Cursors_ll_angle_get", _wrap_Cursors_ll_angle_get, METH_VARARGS },
	 { (char *)"Cursors_lr_angle_set", _wrap_Cursors_lr_angle_set, METH_VARARGS },
	 { (char *)"Cursors_lr_angle_get", _wrap_Cursors_lr_angle_get, METH_VARARGS },
	 { (char *)"Cursors_ul_angle_set", _wrap_Cursors_ul_angle_set, METH_VARARGS },
	 { (char *)"Cursors_ul_angle_get", _wrap_Cursors_ul_angle_get, METH_VARARGS },
	 { (char *)"Cursors_ur_angle_set", _wrap_Cursors_ur_angle_set, METH_VARARGS },
	 { (char *)"Cursors_ur_angle_get", _wrap_Cursors_ur_angle_get, METH_VARARGS },
	 { (char *)"Cursors_swigregister", Cursors_swigregister, METH_VARARGS },
	 { (char *)"Openbox_state", _wrap_Openbox_state, METH_VARARGS },
	 { (char *)"Openbox_timerManager", _wrap_Openbox_timerManager, METH_VARARGS },
	 { (char *)"Openbox_property", _wrap_Openbox_property, METH_VARARGS },
	 { (char *)"Openbox_screen", _wrap_Openbox_screen, METH_VARARGS },
	 { (char *)"Openbox_cursors", _wrap_Openbox_cursors, METH_VARARGS },
	 { (char *)"Openbox_addClient", _wrap_Openbox_addClient, METH_VARARGS },
	 { (char *)"Openbox_removeClient", _wrap_Openbox_removeClient, METH_VARARGS },
	 { (char *)"Openbox_findClient", _wrap_Openbox_findClient, METH_VARARGS },
	 { (char *)"Openbox_shutdown", _wrap_Openbox_shutdown, METH_VARARGS },
	 { (char *)"Openbox_swigregister", Openbox_swigregister, METH_VARARGS },
	 { (char *)"OBScreen_managed", _wrap_OBScreen_managed, METH_VARARGS },
	 { (char *)"OBScreen_imageControl", _wrap_OBScreen_imageControl, METH_VARARGS },
	 { (char *)"OBScreen_area", _wrap_OBScreen_area, METH_VARARGS },
	 { (char *)"OBScreen_style", _wrap_OBScreen_style, METH_VARARGS },
	 { (char *)"OBScreen_addStrut", _wrap_OBScreen_addStrut, METH_VARARGS },
	 { (char *)"OBScreen_removeStrut", _wrap_OBScreen_removeStrut, METH_VARARGS },
	 { (char *)"OBScreen_loadStyle", _wrap_OBScreen_loadStyle, METH_VARARGS },
	 { (char *)"OBScreen_manageExisting", _wrap_OBScreen_manageExisting, METH_VARARGS },
	 { (char *)"OBScreen_manageWindow", _wrap_OBScreen_manageWindow, METH_VARARGS },
	 { (char *)"OBScreen_unmanageWindow", _wrap_OBScreen_unmanageWindow, METH_VARARGS },
	 { (char *)"OBScreen_client", _wrap_OBScreen_client, METH_VARARGS },
	 { (char *)"OBScreen_clientCount", _wrap_OBScreen_clientCount, METH_VARARGS },
	 { (char *)"OBScreen_swigregister", OBScreen_swigregister, METH_VARARGS },
	 { (char *)"MwmHints_flags_set", _wrap_MwmHints_flags_set, METH_VARARGS },
	 { (char *)"MwmHints_flags_get", _wrap_MwmHints_flags_get, METH_VARARGS },
	 { (char *)"MwmHints_functions_set", _wrap_MwmHints_functions_set, METH_VARARGS },
	 { (char *)"MwmHints_functions_get", _wrap_MwmHints_functions_get, METH_VARARGS },
	 { (char *)"MwmHints_decorations_set", _wrap_MwmHints_decorations_set, METH_VARARGS },
	 { (char *)"MwmHints_decorations_get", _wrap_MwmHints_decorations_get, METH_VARARGS },
	 { (char *)"MwmHints_swigregister", MwmHints_swigregister, METH_VARARGS },
	 { (char *)"OBClient_frame_set", _wrap_OBClient_frame_set, METH_VARARGS },
	 { (char *)"OBClient_frame_get", _wrap_OBClient_frame_get, METH_VARARGS },
	 { (char *)"OBClient_ignore_unmaps_set", _wrap_OBClient_ignore_unmaps_set, METH_VARARGS },
	 { (char *)"OBClient_ignore_unmaps_get", _wrap_OBClient_ignore_unmaps_get, METH_VARARGS },
	 { (char *)"OBClient_screen", _wrap_OBClient_screen, METH_VARARGS },
	 { (char *)"OBClient_window", _wrap_OBClient_window, METH_VARARGS },
	 { (char *)"OBClient_type", _wrap_OBClient_type, METH_VARARGS },
	 { (char *)"OBClient_desktop", _wrap_OBClient_desktop, METH_VARARGS },
	 { (char *)"OBClient_title", _wrap_OBClient_title, METH_VARARGS },
	 { (char *)"OBClient_iconTitle", _wrap_OBClient_iconTitle, METH_VARARGS },
	 { (char *)"OBClient_appName", _wrap_OBClient_appName, METH_VARARGS },
	 { (char *)"OBClient_appClass", _wrap_OBClient_appClass, METH_VARARGS },
	 { (char *)"OBClient_canFocus", _wrap_OBClient_canFocus, METH_VARARGS },
	 { (char *)"OBClient_urgent", _wrap_OBClient_urgent, METH_VARARGS },
	 { (char *)"OBClient_focusNotify", _wrap_OBClient_focusNotify, METH_VARARGS },
	 { (char *)"OBClient_shaped", _wrap_OBClient_shaped, METH_VARARGS },
	 { (char *)"OBClient_gravity", _wrap_OBClient_gravity, METH_VARARGS },
	 { (char *)"OBClient_positionRequested", _wrap_OBClient_positionRequested, METH_VARARGS },
	 { (char *)"OBClient_decorations", _wrap_OBClient_decorations, METH_VARARGS },
	 { (char *)"OBClient_funtions", _wrap_OBClient_funtions, METH_VARARGS },
	 { (char *)"OBClient_modal", _wrap_OBClient_modal, METH_VARARGS },
	 { (char *)"OBClient_shaded", _wrap_OBClient_shaded, METH_VARARGS },
	 { (char *)"OBClient_iconic", _wrap_OBClient_iconic, METH_VARARGS },
	 { (char *)"OBClient_maxVert", _wrap_OBClient_maxVert, METH_VARARGS },
	 { (char *)"OBClient_maxHorz", _wrap_OBClient_maxHorz, METH_VARARGS },
	 { (char *)"OBClient_fullscreen", _wrap_OBClient_fullscreen, METH_VARARGS },
	 { (char *)"OBClient_floating", _wrap_OBClient_floating, METH_VARARGS },
	 { (char *)"OBClient_toggleClientBorder", _wrap_OBClient_toggleClientBorder, METH_VARARGS },
	 { (char *)"OBClient_area", _wrap_OBClient_area, METH_VARARGS },
	 { (char *)"OBClient_move", _wrap_OBClient_move, METH_VARARGS },
	 { (char *)"OBClient_resize", _wrap_OBClient_resize, METH_VARARGS },
	 { (char *)"OBClient_propertyHandler", _wrap_OBClient_propertyHandler, METH_VARARGS },
	 { (char *)"OBClient_clientMessageHandler", _wrap_OBClient_clientMessageHandler, METH_VARARGS },
	 { (char *)"OBClient_shapeHandler", _wrap_OBClient_shapeHandler, METH_VARARGS },
	 { (char *)"OBClient_configureRequestHandler", _wrap_OBClient_configureRequestHandler, METH_VARARGS },
	 { (char *)"OBClient_unmapHandler", _wrap_OBClient_unmapHandler, METH_VARARGS },
	 { (char *)"OBClient_destroyHandler", _wrap_OBClient_destroyHandler, METH_VARARGS },
	 { (char *)"OBClient_swigregister", OBClient_swigregister, METH_VARARGS },
	 { (char *)"Openbox_instance", _wrap_Openbox_instance, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ob__OpenboxTo_p_otk__OtkEventHandler(void *x) {
    return (void *)((otk::OtkEventHandler *)  ((ob::Openbox *) x));
}
static void *_p_ob__OBClientTo_p_otk__OtkEventHandler(void *x) {
    return (void *)((otk::OtkEventHandler *)  ((ob::OBClient *) x));
}
static void *_p_ob__OBClientTo_p_ob__OBWidget(void *x) {
    return (void *)((ob::OBWidget *)  ((ob::OBClient *) x));
}
static void *_p_ob__OpenboxTo_p_otk__OtkEventDispatcher(void *x) {
    return (void *)((otk::OtkEventDispatcher *)  ((ob::Openbox *) x));
}
static swig_type_info _swigt__p_Window[] = {{"_p_Window", 0, "Window *", 0},{"_p_Window"},{0}};
static swig_type_info _swigt__p_otk__OBTimerQueueManager[] = {{"_p_otk__OBTimerQueueManager", 0, "otk::OBTimerQueueManager *", 0},{"_p_otk__OBTimerQueueManager"},{0}};
static swig_type_info _swigt__p_ob__Cursors[] = {{"_p_ob__Cursors", 0, "ob::Cursors *", 0},{"_p_ob__Cursors"},{0}};
static swig_type_info _swigt__p_ob__OBScreen[] = {{"_p_ob__OBScreen", 0, "ob::OBScreen *", 0},{"_p_ob__OBScreen"},{0}};
static swig_type_info _swigt__p_otk__Style[] = {{"_p_otk__Style", 0, "otk::Style *", 0},{"_p_otk__Style"},{0}};
static swig_type_info _swigt__p_ob__OBFrame[] = {{"_p_ob__OBFrame", 0, "ob::OBFrame *", 0},{"_p_ob__OBFrame"},{0}};
static swig_type_info _swigt__p_ob__OBClient[] = {{"_p_ob__OBClient", 0, "ob::OBClient *", 0},{"_p_ob__OBClient"},{0}};
static swig_type_info _swigt__p_ob__Openbox[] = {{"_p_ob__Openbox", 0, "ob::Openbox *", 0},{"_p_ob__Openbox"},{0}};
static swig_type_info _swigt__p_Cursor[] = {{"_p_Cursor", 0, "Cursor *", 0},{"_p_Cursor"},{0}};
static swig_type_info _swigt__p_otk__Strut[] = {{"_p_otk__Strut", 0, "otk::Strut *", 0},{"_p_otk__Strut"},{0}};
static swig_type_info _swigt__p_XShapeEvent[] = {{"_p_XShapeEvent", 0, "XShapeEvent *", 0},{"_p_XShapeEvent"},{0}};
static swig_type_info _swigt__p_XConfigureRequestEvent[] = {{"_p_XConfigureRequestEvent", 0, "XConfigureRequestEvent *", 0},{"_p_XConfigureRequestEvent"},{0}};
static swig_type_info _swigt__p_otk__OtkEventHandler[] = {{"_p_otk__OtkEventHandler", 0, "otk::OtkEventHandler *", 0},{"_p_otk__OtkEventHandler"},{"_p_ob__Openbox", _p_ob__OpenboxTo_p_otk__OtkEventHandler},{"_p_ob__OBClient", _p_ob__OBClientTo_p_otk__OtkEventHandler},{0}};
static swig_type_info _swigt__p_otk__Rect[] = {{"_p_otk__Rect", 0, "otk::Rect *", 0},{"_p_otk__Rect"},{0}};
static swig_type_info _swigt__p_ob__OBWidget[] = {{"_p_ob__OBWidget", 0, "ob::OBWidget *", 0},{"_p_ob__OBWidget"},{"_p_ob__OBClient", _p_ob__OBClientTo_p_ob__OBWidget},{0}};
static swig_type_info _swigt__p_XClientMessageEvent[] = {{"_p_XClientMessageEvent", 0, "XClientMessageEvent *", 0},{"_p_XClientMessageEvent"},{0}};
static swig_type_info _swigt__p_otk__OBProperty[] = {{"_p_otk__OBProperty", 0, "otk::OBProperty *", 0},{"_p_otk__OBProperty"},{0}};
static swig_type_info _swigt__p_otk__OtkEventDispatcher[] = {{"_p_otk__OtkEventDispatcher", 0, "otk::OtkEventDispatcher *", 0},{"_p_otk__OtkEventDispatcher"},{"_p_ob__Openbox", _p_ob__OpenboxTo_p_otk__OtkEventDispatcher},{0}};
static swig_type_info _swigt__p_XPropertyEvent[] = {{"_p_XPropertyEvent", 0, "XPropertyEvent *", 0},{"_p_XPropertyEvent"},{0}};
static swig_type_info _swigt__p_XDestroyWindowEvent[] = {{"_p_XDestroyWindowEvent", 0, "XDestroyWindowEvent *", 0},{"_p_XDestroyWindowEvent"},{0}};
static swig_type_info _swigt__p_otk__BImageControl[] = {{"_p_otk__BImageControl", 0, "otk::BImageControl *", 0},{"_p_otk__BImageControl"},{0}};
static swig_type_info _swigt__p_ob__MwmHints[] = {{"_p_ob__MwmHints", 0, "ob::MwmHints *", 0},{"_p_ob__MwmHints"},{0}};
static swig_type_info _swigt__p_otk__Configuration[] = {{"_p_otk__Configuration", 0, "otk::Configuration *", 0},{"_p_otk__Configuration"},{0}};
static swig_type_info _swigt__p_XUnmapEvent[] = {{"_p_XUnmapEvent", 0, "XUnmapEvent *", 0},{"_p_XUnmapEvent"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Window, 
_swigt__p_otk__OBTimerQueueManager, 
_swigt__p_ob__Cursors, 
_swigt__p_ob__OBScreen, 
_swigt__p_otk__Style, 
_swigt__p_ob__OBFrame, 
_swigt__p_ob__OBClient, 
_swigt__p_ob__Openbox, 
_swigt__p_Cursor, 
_swigt__p_otk__Strut, 
_swigt__p_XShapeEvent, 
_swigt__p_XConfigureRequestEvent, 
_swigt__p_otk__OtkEventHandler, 
_swigt__p_otk__Rect, 
_swigt__p_ob__OBWidget, 
_swigt__p_XClientMessageEvent, 
_swigt__p_otk__OBProperty, 
_swigt__p_otk__OtkEventDispatcher, 
_swigt__p_XPropertyEvent, 
_swigt__p_XDestroyWindowEvent, 
_swigt__p_otk__BImageControl, 
_swigt__p_ob__MwmHints, 
_swigt__p_otk__Configuration, 
_swigt__p_XUnmapEvent, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"Openbox_State_Starting", (long) ob::Openbox::State_Starting, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Openbox_State_Normal", (long) ob::Openbox::State_Normal, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Openbox_State_Exiting", (long) ob::Openbox::State_Exiting, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBScreen_event_mask", (long) ob::OBScreen::event_mask, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MwmHints_elements", (long) ob::MwmHints::elements, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_TopLeft", (long) ob::OBClient::TopLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_TopRight", (long) ob::OBClient::TopRight, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_BottomLeft", (long) ob::OBClient::BottomLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_BottomRight", (long) ob::OBClient::BottomRight, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Desktop", (long) ob::OBClient::Type_Desktop, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Dock", (long) ob::OBClient::Type_Dock, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Toolbar", (long) ob::OBClient::Type_Toolbar, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Menu", (long) ob::OBClient::Type_Menu, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Utility", (long) ob::OBClient::Type_Utility, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Splash", (long) ob::OBClient::Type_Splash, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Dialog", (long) ob::OBClient::Type_Dialog, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Type_Normal", (long) ob::OBClient::Type_Normal, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFlag_Functions", (long) ob::OBClient::MwmFlag_Functions, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFlag_Decorations", (long) ob::OBClient::MwmFlag_Decorations, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFunc_All", (long) ob::OBClient::MwmFunc_All, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFunc_Resize", (long) ob::OBClient::MwmFunc_Resize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFunc_Move", (long) ob::OBClient::MwmFunc_Move, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFunc_Iconify", (long) ob::OBClient::MwmFunc_Iconify, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmFunc_Maximize", (long) ob::OBClient::MwmFunc_Maximize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmDecor_All", (long) ob::OBClient::MwmDecor_All, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmDecor_Border", (long) ob::OBClient::MwmDecor_Border, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmDecor_Handle", (long) ob::OBClient::MwmDecor_Handle, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmDecor_Title", (long) ob::OBClient::MwmDecor_Title, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmDecor_Iconify", (long) ob::OBClient::MwmDecor_Iconify, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_MwmDecor_Maximize", (long) ob::OBClient::MwmDecor_Maximize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Func_Resize", (long) ob::OBClient::Func_Resize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Func_Move", (long) ob::OBClient::Func_Move, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Func_Iconify", (long) ob::OBClient::Func_Iconify, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Func_Maximize", (long) ob::OBClient::Func_Maximize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Func_Close", (long) ob::OBClient::Func_Close, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Titlebar", (long) ob::OBClient::Decor_Titlebar, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Handle", (long) ob::OBClient::Decor_Handle, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Border", (long) ob::OBClient::Decor_Border, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Iconify", (long) ob::OBClient::Decor_Iconify, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Maximize", (long) ob::OBClient::Decor_Maximize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Sticky", (long) ob::OBClient::Decor_Sticky, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_Decor_Close", (long) ob::OBClient::Decor_Close, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_State_Remove", (long) ob::OBClient::State_Remove, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_State_Add", (long) ob::OBClient::State_Add, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_State_Toggle", (long) ob::OBClient::State_Toggle, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_event_mask", (long) ob::OBClient::event_mask, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"OBClient_no_propagate_mask", (long) ob::OBClient::no_propagate_mask, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

