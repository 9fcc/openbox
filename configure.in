dnl configure.in for Openbox
dnl Initialize autoconf and automake
AC_INIT(src/blackbox.cc)
AM_INIT_AUTOMAKE(openbox,2.2.1,no-define)

dnl Determine default prefix
test x$prefix = "xNONE" && prefix="$ac_default_prefix"

dnl Check for various flavors of UNIX(r)
dnl AC_AIX
dnl AC_ISC_POSIX

dnl Locate required external software
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL

dnl Determine if maintainer portions of the Makefiles should be included.
AM_MAINTAINER_MODE

AC_LANG(C++)

AC_CHECK_PROGS(regex_cmd, sed)
if test x$regex_cmd = "x"; then
  AC_MSG_ERROR([error. sed is required to build the default menu file.])
fi

dnl Check for system header files
AC_CHECK_HEADERS(ctype.h dirent.h fcntl.h libgen.h locale.h nl_types.h process.h signal.h stdarg.h stdio.h string.h stdlib.h time.h unistd.h sys/param.h sys/select.h sys/signal.h sys/stat.h sys/time.h sys/types.h sys/wait.h)
AC_HEADER_TIME

dnl Check for existance of basename(), setlocale() and strftime()
AC_CHECK_FUNCS(basename, , AC_CHECK_LIB(gen, basename,
			  AC_DEFINE(HAVE_BASENAME) LIBS="$LIBS -lgen"))
AC_CHECK_FUNCS(getpid setlocale sigaction strftime strcasestr snprintf vsnprintf catopen catgets catclose)
AC_CHECK_LIB(nsl, t_open, LIBS="$LIBS -lnsl")
AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")

dnl Check for X headers and libraries
AC_PATH_X
AC_PATH_XTRA

test "$no_x" = "yes" && AC_MSG_ERROR([Openbox requires the X Window System libraries and headers.])

test x$x_includes = "x" && x_includes="/usr/include"
test x$x_libraries = "x" && x_libraries="/usr/lib"

CFLAGS="$CFLAGS $X_CFLAGS"
CXXFLAGS="$CXXFLAGS $X_CFLAGS"
LIBS="$LIBS $X_LIBS"
LDFLAGS="$LDFLAGS $LIBS $X_PRE_LIBS"

AC_MSG_CHECKING(for GCC)
if test "$GCC" = "yes"; then
  AC_MSG_RESULT([yes])
  CXXFLAGS="${CXXFLAGS} -Wall -W"
else
  AC_MSG_RESULT([no, trying other compilers])
  AC_MSG_CHECKING(for MIPSpro)
  mips_pro_ver=`$CC -version 2>&1 | grep -i mipspro | cut -f4 -d ' '`
  if test "x$mips_pro_ver" = "x"; then
    AC_MSG_RESULT([no])
  else
    AC_MSG_RESULT([yes, version $mips_pro_ver.])
    AC_MSG_CHECKING(for -LANG:std in CXXFLAGS)
    lang_std_not_set=`echo $CXXFLAGS | grep "\-LANG:std"`
    if test "x$lang_std_not_set" = "x"; then
      AC_MSG_RESULT([not set, setting.])
      CXXFLAGS="${CXXFLAGS} -LANG:std"
    else
      AC_MSG_RESULT([already set.])
    fi
  fi
fi

dnl Check for required functions in -lX11
AC_CHECK_LIB(X11, XOpenDisplay,
  LIBS="$LIBS -lX11",
  AC_MSG_ERROR([Could not find XOpenDisplay in -lX11.])
)

LIBS="$LIBS $X_EXTRA_LIBS"

dnl Check for XShape extension support and proper library files.
SHAPE=""
AC_MSG_CHECKING([whether to build support for the XShape extension])
AC_ARG_ENABLE(
  shape, [  --enable-shape          enable support of the XShape extension @<:@default=yes@:>@])

: ${enableval="yes"}
if test "$enableval" = "yes"; then
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xext, XShapeCombineShape,
	AC_MSG_CHECKING([for X11/extensions/shape.h])
	AC_TRY_LINK(
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/extensions/shape.h>
, long foo = ShapeSet,
	  AC_MSG_RESULT([yes])
	  SHAPE="yes",
	  AC_MSG_RESULT([no])
	)
  )
else
  AC_MSG_RESULT([no])
fi
if test "$SHAPE" = "yes"; then
  LIBS="$LIBS -lXext"
  AC_DEFINE(SHAPE,1,Enable support of the XShape extension)
fi

dnl Check for Xinerama extension support and proper library files.
XINERAMA=""
AC_MSG_CHECKING([whether to build support for the Xinerama extension])
AC_ARG_ENABLE(
  xinerama, [  --enable-xinerama       enable support of the Xinerama extension @<:@default=no@:>@],
  if test "$enableval" = "yes"; then
	AC_MSG_RESULT([yes])

	AC_CHECK_LIB(Xinerama, XineramaQueryExtension,
	  AC_MSG_CHECKING([for X11/extensions/Xinerama.h])
	  AC_TRY_LINK(
#include <X11/Xlib.h>
#include <X11/extensions/Xinerama.h>
, XineramaScreenInfo foo,
		AC_MSG_RESULT([yes])
		XINERAMA="yes"
		LIBS="$LIBS -lXinerama",
		AC_MSG_RESULT([no])
	  )
	)

  else
	AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([no])
)
if test "$XINERAMA" = "yes"; then
  AC_DEFINE(XINERAMA,1,Enable support of the Xinerama extension)
fi

dnl Check for Xft extension support and proper library files.
XFT=""
XFT2=""
AC_MSG_CHECKING([whether to build support for the Xft extension])
AC_ARG_ENABLE(
  xft, [  --enable-xft            enable support of the Xft extension @<:@default=yes@:>@])
: ${enableval="yes"}
if test "$enableval" = "yes"; then

  if pkg-config xft; then
    XFT2="yes"
    AC_MSG_RESULT([version 2])
    S_CXXFLAGS=${CXXFLAGS}
    S_LIBS=${LIBS}
    XFT_CFLAGS="`pkg-config --cflags xft`"
    XFT_LIBS="`pkg-config --libs xft`"
    CXXFLAGS="${XFT_CFLAGS} ${CXXFLAGS}"
    LIBS="${LIBS} ${XFT_LIBS}"
    AC_CHECK_LIB(Xft, XftFontOpenXlfd,
      AC_MSG_CHECKING([for X11/Xft/Xft.h for Xft2])
      AC_TRY_LINK(
      [
        #include <X11/Xlib.h>
        #include <X11/Xft/Xft.h>
      ],
      [
        int i = XFT_MAJOR;
        XftFont foo;
      ],
      [
        AC_MSG_RESULT([yes])
        XFT="yes"
      ],
      [
        AC_MSG_RESULT([no])
        XFT2=""
        AC_MSG_RESULT()
	AC_MSG_RESULT([** WARNING: Xft support is disabled! **])
        AC_MSG_RESULT()
      ]
      )
    )
    CXXFLAGS=${S_CXXFLAGS}
    LIBS=${S_LIBS}
  else 
    AC_MSG_RESULT([version 1])
    AC_CHECK_LIB(Xft, XftFontOpenXlfd,
      AC_MSG_CHECKING([for X11/Xft/Xft.h for Xft1])
      AC_TRY_LINK(
      [
        #include <X11/Xlib.h>
        #include <X11/Xft/Xft.h>
      ],
      [
        XftFont foo;
      ],
      [
        AC_MSG_RESULT([yes])
        XFT="yes"
        XFT_LIBS="$LIBS -lXft"

        dnl Check for utf8 support in the Xft library
        dnl AC_CHECK_LIB(Xft, XftDrawStringUtf8,
        dnl  XFT_UTF8="yes",
        dnl),
      ],
      [
        AC_MSG_RESULT([no])
        AC_MSG_RESULT()
	AC_MSG_RESULT([** WARNING: Xft support is disabled! **])
        AC_MSG_RESULT()
      ]
      )
    )
  fi
else
  AC_MSG_RESULT([no])
fi
if test "$XFT" = "yes"; then
  AC_SUBST([XFT_CFLAGS])
  AC_SUBST([XFT_LIBS])
  AC_DEFINE(XFT,1,[Enable support of the Xft extension])
  dnl if test "$XFT_UTF8" = "yes"; then
    dnl AC_DEFINE(XFT_UTF8,1,[Support for Utf8 text in the Xft extension])
  dnl fi
fi
AM_CONDITIONAL(XFT, test "$XFT" = "yes")
AM_CONDITIONAL(XFT2, test "$XFT2" = "yes")
	
dnl Check for ordered 8bpp dithering
ORDEREDPSEUDO=""
AC_MSG_CHECKING([whether to include Pseudocolor ordered dithering code])
AC_ARG_ENABLE(ordered-pseudo,
[  --enable-ordered-pseudo include code for ordered pseudocolor (8bpp)
                          dithering @<:@default=no@:>@],
  if test "$enableval" = "yes"; then
    AC_MSG_RESULT([yes])
    ORDEREDPSEUDO="yes" 
  else
    AC_MSG_RESULT([no]) 
  fi,
  AC_MSG_RESULT([no])
)
if test "$ORDEREDPSEUDO" = "yes"; then
  AC_DEFINE(ORDEREDPSEUDO,1,Enable pseudocolor ordered dithering)
fi

dnl Check whether to include debugging code
DEBUG=""
AC_MSG_CHECKING([whether to include verbose debugging code])
AC_ARG_ENABLE(debug,
  [  --enable-debug          include verbose debugging code @<:@default=no@:>@],
  if test "$enableval" = "yes"; then
    AC_MSG_RESULT([yes])
    if test "$GCC" = "yes"; then
       DEBUG="-DDEBUG -fno-inline -g"
    else
       DEBUG="-DDEBUG"
    fi
  else
    AC_MSG_RESULT([no])
    DEBUG="-DNDEBUG"
  fi,
  AC_MSG_RESULT([no])
  DEBUG="-DNDEBUG"
)
AC_SUBST(DEBUG)

dnl Check whether to include natural language support (i18n)
NLS=""
AC_MSG_CHECKING([whether to include NLS support])
AC_ARG_ENABLE(nls,
  [  --enable-nls            include natural language support @<:@default=yes@:>@],
  if test "$enableval" = "yes"; then
    AC_MSG_RESULT([yes])
    NLS="yes"
  else
    AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([yes])
  NLS="yes"
)

AC_CHECK_LIB(xpg4, setlocale, LIBS="$LIBS -lxpg4")

AC_CHECK_PROGS(gencat_cmd, gencat)
if test x$gencat_cmd = "x"; then
  NLS=""
fi

if test "$NLS" = "yes"; then
  AC_DEFINE(NLS,1,Include natural language support)
  AC_SUBST(NLS)
fi

dnl Check for new timed pixmap cache
TIMEDCACHE=""
AC_MSG_CHECKING([whether to use the timed pixmap cache])
AC_ARG_ENABLE(
  timed-cache,
[  --enable-timed-cache    use timed pixmap cache @<:@default=yes@:>@],
  if test "$enableval" = "yes"; then
    AC_MSG_RESULT([yes])
    TIMEDCACHE="yes"
  else
    AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([yes])
  TIMEDCACHE="yes"
)
if test "$TIMEDCACHE" = "yes"; then
  AC_DEFINE(TIMEDCACHE,1,Use timed pixmap cache)
fi

dnl Check for bitmapped buttons
BITMAPBUTTONS=""
AC_MSG_CHECKING([whether to include bitmappable buttons])
AC_ARG_ENABLE(
  bitmap-buttons,
[  --enable-bitmap-buttons include bitmappable buttons @<:@default=yes@:>@],
  if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    BITMAPBUTTONS="yes"
  else
    AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([yes])
  BITMAPBUTTONS="yes"
)
if test x$BITMAPBUTTONS = "xyes"; then
  AC_DEFINE(BITMAPBUTTONS,1,Include bitmappable buttons)
fi

dnl Determine the return type of signal handlers
AC_TYPE_SIGNAL

dnl Print results
AC_MSG_RESULT([])
AC_MSG_RESULT([	$PACKAGE version $VERSION configured successfully.])
AC_MSG_RESULT([])
AC_MSG_RESULT([Using '$prefix' for installation.])
AC_MSG_RESULT([Using '$CXX' for C++ compiler.])
AC_MSG_RESULT([Building with '$CXXFLAGS' for C++ compiler flags.])
AC_MSG_RESULT([Building with '$LIBS' for linker flags.])
AC_MSG_RESULT([])

dnl Output files
AM_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile
src/Makefile
util/Makefile
util/epist/Makefile
data/Makefile
data/styles/Makefile
data/buttons/Makefile
doc/Makefile
nls/Makefile
nls/C/Makefile
nls/da_DK/Makefile
nls/de_DE/Makefile
nls/es_AR/Makefile
nls/es_ES/Makefile
nls/et_EE/Makefile
nls/fr_FR/Makefile
nls/hu_HU/Makefile
nls/it_IT/Makefile
nls/ja_JP/Makefile
nls/ko_KR/Makefile
nls/lv_LV/Makefile
nls/no_NO/Makefile
nls/pl_PL/Makefile
nls/nl_NL/Makefile
nls/pt_BR/Makefile
nls/ro_RO/Makefile
nls/ru_RU/Makefile
nls/sk_SK/Makefile
nls/sl_SI/Makefile
nls/sv_SE/Makefile
nls/tr_TR/Makefile
nls/uk_UA/Makefile
nls/zh_CN/Makefile
nls/zh_TW/Makefile
version.h)
